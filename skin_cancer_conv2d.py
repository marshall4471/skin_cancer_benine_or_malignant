# -*- coding: utf-8 -*-
"""skin_cancer_Conv2D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10znQ9ZEy2R2tPYEvdIqQKz_-oJPJVeJR
"""

from google.colab import drive
drive.mount("/content/gdrive")

file =('/content/gdrive/MyDrive/skin_cancer/')

file2=('/content/gdrive/MyDrive/skin_cancer/')



from keras.models import Sequential

from keras.layers import Conv2D

from keras.layers import MaxPooling2D

from keras.layers import Flatten

from keras.layers import Dense, Activation

from keras import models

from keras.layers import Dropout

from keras_preprocessing.image import image_data_generator

import numpy as np

import tensorflow as tf

import cv2

from keras_preprocessing import image

import matplotlib.pyplot as plt

img_dims = 384

batch_size = 32

model = Sequential()

model.add(Conv2D(256, kernel_size=3, activation='relu', input_shape=(384,384,3)))
model.add(Conv2D(256, kernel_size=3, activation='relu'))
model.add(Conv2D(128, kernel_size=3, activation='relu'))
model.add(Conv2D(128, kernel_size=3, activation='relu'))
model.add(Conv2D(128, kernel_size=3, activation='relu'))
model.add(Conv2D(128, kernel_size=3, activation='relu'))
model.add(MaxPooling2D(pool_size=(3, 3)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(2, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

import keras as k

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255,
                                                                shear_range = 0.2,
                                                                zoom_range = 0.2,
                                                                horizontal_flip=True)

test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

test_set = test_datagen.flow_from_directory(directory=file, shuffle=True, batch_size=batch_size, class_mode='categorical')

training_set= train_datagen.flow_from_directory(directory=file2, shuffle=True, batch_size=batch_size, class_mode='categorical')

epochs = 3

history = model.fit_generator(training_set, steps_per_epoch=training_set.samples// batch_size, epochs=epochs, validation_data=test_set, validation_steps= test_set.samples)

model.save('skin_cancer_pred.h5')

history.history['accuracy']